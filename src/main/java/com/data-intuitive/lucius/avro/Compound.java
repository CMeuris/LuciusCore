/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.data-intuitive.lucius.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Compound extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Compound\",\"namespace\":\"com.data-intuitive.lucius.avro\",\"fields\":[{\"name\":\"jnjs\",\"type\":\"int\"},{\"name\":\"jnjb\",\"type\":\"int\"},{\"name\":\"smiles\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"inchikey\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"compoundName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"compoundType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"compoundTargets\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int jnjs;
  @Deprecated public int jnjb;
  @Deprecated public java.lang.String smiles;
  @Deprecated public java.lang.String inchikey;
  @Deprecated public java.lang.String compoundName;
  @Deprecated public java.lang.String compoundType;
  @Deprecated public java.util.List<java.lang.String> compoundTargets;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Compound() {}

  /**
   * All-args constructor.
   */
  public Compound(java.lang.Integer jnjs, java.lang.Integer jnjb, java.lang.String smiles, java.lang.String inchikey, java.lang.String compoundName, java.lang.String compoundType, java.util.List<java.lang.String> compoundTargets) {
    this.jnjs = jnjs;
    this.jnjb = jnjb;
    this.smiles = smiles;
    this.inchikey = inchikey;
    this.compoundName = compoundName;
    this.compoundType = compoundType;
    this.compoundTargets = compoundTargets;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return jnjs;
    case 1: return jnjb;
    case 2: return smiles;
    case 3: return inchikey;
    case 4: return compoundName;
    case 5: return compoundType;
    case 6: return compoundTargets;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: jnjs = (java.lang.Integer)value$; break;
    case 1: jnjb = (java.lang.Integer)value$; break;
    case 2: smiles = (java.lang.String)value$; break;
    case 3: inchikey = (java.lang.String)value$; break;
    case 4: compoundName = (java.lang.String)value$; break;
    case 5: compoundType = (java.lang.String)value$; break;
    case 6: compoundTargets = (java.util.List<java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'jnjs' field.
   */
  public java.lang.Integer getJnjs() {
    return jnjs;
  }

  /**
   * Sets the value of the 'jnjs' field.
   * @param value the value to set.
   */
  public void setJnjs(java.lang.Integer value) {
    this.jnjs = value;
  }

  /**
   * Gets the value of the 'jnjb' field.
   */
  public java.lang.Integer getJnjb() {
    return jnjb;
  }

  /**
   * Sets the value of the 'jnjb' field.
   * @param value the value to set.
   */
  public void setJnjb(java.lang.Integer value) {
    this.jnjb = value;
  }

  /**
   * Gets the value of the 'smiles' field.
   */
  public java.lang.String getSmiles() {
    return smiles;
  }

  /**
   * Sets the value of the 'smiles' field.
   * @param value the value to set.
   */
  public void setSmiles(java.lang.String value) {
    this.smiles = value;
  }

  /**
   * Gets the value of the 'inchikey' field.
   */
  public java.lang.String getInchikey() {
    return inchikey;
  }

  /**
   * Sets the value of the 'inchikey' field.
   * @param value the value to set.
   */
  public void setInchikey(java.lang.String value) {
    this.inchikey = value;
  }

  /**
   * Gets the value of the 'compoundName' field.
   */
  public java.lang.String getCompoundName() {
    return compoundName;
  }

  /**
   * Sets the value of the 'compoundName' field.
   * @param value the value to set.
   */
  public void setCompoundName(java.lang.String value) {
    this.compoundName = value;
  }

  /**
   * Gets the value of the 'compoundType' field.
   */
  public java.lang.String getCompoundType() {
    return compoundType;
  }

  /**
   * Sets the value of the 'compoundType' field.
   * @param value the value to set.
   */
  public void setCompoundType(java.lang.String value) {
    this.compoundType = value;
  }

  /**
   * Gets the value of the 'compoundTargets' field.
   */
  public java.util.List<java.lang.String> getCompoundTargets() {
    return compoundTargets;
  }

  /**
   * Sets the value of the 'compoundTargets' field.
   * @param value the value to set.
   */
  public void setCompoundTargets(java.util.List<java.lang.String> value) {
    this.compoundTargets = value;
  }

  /** Creates a new Compound RecordBuilder */
  public static com.data-intuitive.lucius.avro.Compound.Builder newBuilder() {
    return new com.data-intuitive.lucius.avro.Compound.Builder();
  }
  
  /** Creates a new Compound RecordBuilder by copying an existing Builder */
  public static com.data-intuitive.lucius.avro.Compound.Builder newBuilder(com.data-intuitive.lucius.avro.Compound.Builder other) {
    return new com.data-intuitive.lucius.avro.Compound.Builder(other);
  }
  
  /** Creates a new Compound RecordBuilder by copying an existing Compound instance */
  public static com.data-intuitive.lucius.avro.Compound.Builder newBuilder(com.data-intuitive.lucius.avro.Compound other) {
    return new com.data-intuitive.lucius.avro.Compound.Builder(other);
  }
  
  /**
   * RecordBuilder for Compound instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Compound>
    implements org.apache.avro.data.RecordBuilder<Compound> {

    private int jnjs;
    private int jnjb;
    private java.lang.String smiles;
    private java.lang.String inchikey;
    private java.lang.String compoundName;
    private java.lang.String compoundType;
    private java.util.List<java.lang.String> compoundTargets;

    /** Creates a new Builder */
    private Builder() {
      super(com.data-intuitive.lucius.avro.Compound.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.data-intuitive.lucius.avro.Compound.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.jnjs)) {
        this.jnjs = data().deepCopy(fields()[0].schema(), other.jnjs);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.jnjb)) {
        this.jnjb = data().deepCopy(fields()[1].schema(), other.jnjb);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.smiles)) {
        this.smiles = data().deepCopy(fields()[2].schema(), other.smiles);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.inchikey)) {
        this.inchikey = data().deepCopy(fields()[3].schema(), other.inchikey);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.compoundName)) {
        this.compoundName = data().deepCopy(fields()[4].schema(), other.compoundName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.compoundType)) {
        this.compoundType = data().deepCopy(fields()[5].schema(), other.compoundType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.compoundTargets)) {
        this.compoundTargets = data().deepCopy(fields()[6].schema(), other.compoundTargets);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Compound instance */
    private Builder(com.data-intuitive.lucius.avro.Compound other) {
            super(com.data-intuitive.lucius.avro.Compound.SCHEMA$);
      if (isValidValue(fields()[0], other.jnjs)) {
        this.jnjs = data().deepCopy(fields()[0].schema(), other.jnjs);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.jnjb)) {
        this.jnjb = data().deepCopy(fields()[1].schema(), other.jnjb);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.smiles)) {
        this.smiles = data().deepCopy(fields()[2].schema(), other.smiles);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.inchikey)) {
        this.inchikey = data().deepCopy(fields()[3].schema(), other.inchikey);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.compoundName)) {
        this.compoundName = data().deepCopy(fields()[4].schema(), other.compoundName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.compoundType)) {
        this.compoundType = data().deepCopy(fields()[5].schema(), other.compoundType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.compoundTargets)) {
        this.compoundTargets = data().deepCopy(fields()[6].schema(), other.compoundTargets);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'jnjs' field */
    public java.lang.Integer getJnjs() {
      return jnjs;
    }
    
    /** Sets the value of the 'jnjs' field */
    public com.data-intuitive.lucius.avro.Compound.Builder setJnjs(int value) {
      validate(fields()[0], value);
      this.jnjs = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'jnjs' field has been set */
    public boolean hasJnjs() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'jnjs' field */
    public com.data-intuitive.lucius.avro.Compound.Builder clearJnjs() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'jnjb' field */
    public java.lang.Integer getJnjb() {
      return jnjb;
    }
    
    /** Sets the value of the 'jnjb' field */
    public com.data-intuitive.lucius.avro.Compound.Builder setJnjb(int value) {
      validate(fields()[1], value);
      this.jnjb = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'jnjb' field has been set */
    public boolean hasJnjb() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'jnjb' field */
    public com.data-intuitive.lucius.avro.Compound.Builder clearJnjb() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'smiles' field */
    public java.lang.String getSmiles() {
      return smiles;
    }
    
    /** Sets the value of the 'smiles' field */
    public com.data-intuitive.lucius.avro.Compound.Builder setSmiles(java.lang.String value) {
      validate(fields()[2], value);
      this.smiles = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'smiles' field has been set */
    public boolean hasSmiles() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'smiles' field */
    public com.data-intuitive.lucius.avro.Compound.Builder clearSmiles() {
      smiles = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'inchikey' field */
    public java.lang.String getInchikey() {
      return inchikey;
    }
    
    /** Sets the value of the 'inchikey' field */
    public com.data-intuitive.lucius.avro.Compound.Builder setInchikey(java.lang.String value) {
      validate(fields()[3], value);
      this.inchikey = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'inchikey' field has been set */
    public boolean hasInchikey() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'inchikey' field */
    public com.data-intuitive.lucius.avro.Compound.Builder clearInchikey() {
      inchikey = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'compoundName' field */
    public java.lang.String getCompoundName() {
      return compoundName;
    }
    
    /** Sets the value of the 'compoundName' field */
    public com.data-intuitive.lucius.avro.Compound.Builder setCompoundName(java.lang.String value) {
      validate(fields()[4], value);
      this.compoundName = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'compoundName' field has been set */
    public boolean hasCompoundName() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'compoundName' field */
    public com.data-intuitive.lucius.avro.Compound.Builder clearCompoundName() {
      compoundName = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'compoundType' field */
    public java.lang.String getCompoundType() {
      return compoundType;
    }
    
    /** Sets the value of the 'compoundType' field */
    public com.data-intuitive.lucius.avro.Compound.Builder setCompoundType(java.lang.String value) {
      validate(fields()[5], value);
      this.compoundType = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'compoundType' field has been set */
    public boolean hasCompoundType() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'compoundType' field */
    public com.data-intuitive.lucius.avro.Compound.Builder clearCompoundType() {
      compoundType = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'compoundTargets' field */
    public java.util.List<java.lang.String> getCompoundTargets() {
      return compoundTargets;
    }
    
    /** Sets the value of the 'compoundTargets' field */
    public com.data-intuitive.lucius.avro.Compound.Builder setCompoundTargets(java.util.List<java.lang.String> value) {
      validate(fields()[6], value);
      this.compoundTargets = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'compoundTargets' field has been set */
    public boolean hasCompoundTargets() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'compoundTargets' field */
    public com.data-intuitive.lucius.avro.Compound.Builder clearCompoundTargets() {
      compoundTargets = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public Compound build() {
      try {
        Compound record = new Compound();
        record.jnjs = fieldSetFlags()[0] ? this.jnjs : (java.lang.Integer) defaultValue(fields()[0]);
        record.jnjb = fieldSetFlags()[1] ? this.jnjb : (java.lang.Integer) defaultValue(fields()[1]);
        record.smiles = fieldSetFlags()[2] ? this.smiles : (java.lang.String) defaultValue(fields()[2]);
        record.inchikey = fieldSetFlags()[3] ? this.inchikey : (java.lang.String) defaultValue(fields()[3]);
        record.compoundName = fieldSetFlags()[4] ? this.compoundName : (java.lang.String) defaultValue(fields()[4]);
        record.compoundType = fieldSetFlags()[5] ? this.compoundType : (java.lang.String) defaultValue(fields()[5]);
        record.compoundTargets = fieldSetFlags()[6] ? this.compoundTargets : (java.util.List<java.lang.String>) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
